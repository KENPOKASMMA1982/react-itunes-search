{"version":3,"sources":["components/Header.js","components/Album.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Album","album","albumReleaseDate","releaseDate","substring","collectionName","artistName","alt","width","src","artworkUrl100","trackCount","Search","useState","searchValue","setSearchValue","value","onChange","e","target","type","onClick","preventDefault","search","initialState","loading","albums","errorMessage","reducer","state","action","results","error","App","useReducer","dispatch","console","log","fetch","then","response","json","jsonResponse","resultCount","Error","map","index","key","collectionId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"yRAWeA,G,YARA,SAACC,GACd,OACE,4BAAQC,UAAU,cAChB,4BAAKD,EAAME,SCmBFC,EAvBD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACNC,EAAmBD,EAAME,YAAYC,UAAU,EAAG,IAC1D,OACE,yBAAKN,UAAU,SACX,4BAAKG,EAAMI,gBACX,6BAAMJ,EAAMK,YAEZ,6BACI,yBACIC,IAAKN,EAAMI,eACXG,MAAM,MACNC,IAAKR,EAAMS,iBAGnB,wCAAcT,EAAMU,YACpB,0CAAgBT,KCiBTU,G,MA9BA,SAACf,GAAU,MAEcgB,mBAAS,IAFvB,mBAEjBC,EAFiB,KAEJC,EAFI,KAkBxB,OACI,0BAAMjB,UAAU,UACd,2BACEkB,MAAOF,EACPG,SAlByB,SAACC,GAChCH,EAAeG,EAAEC,OAAOH,QAkBlBI,KAAK,SAEP,2BAAOC,QAbc,SAACH,GAC1BA,EAAEI,iBACFzB,EAAM0B,OAAOT,GALbC,EAAe,KAgByBK,KAAK,SAASJ,MAAM,cCrB1DQ,EAAe,CACnBC,SAAS,EACTC,OAAQ,GACRC,aAAc,MAGVC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOV,MACb,IAAK,uBACH,OAAO,eACFS,EADL,CAEEJ,SAAS,EACTE,aAAc,OAElB,IAAK,uBACH,OAAO,eACFE,EADL,CAEEJ,SAAS,EACTC,OAAQI,EAAOC,UAEnB,IAAK,uBACH,OAAO,eACFF,EADL,CAEEJ,SAAS,EACTE,aAAcG,EAAOE,QAEzB,QACE,OAAOH,IAgEEI,MA3Df,WAAgB,IAAD,EACaC,qBAAWN,EAASJ,GADjC,mBACNK,EADM,KACCM,EADD,KAsCLT,EAAkCG,EAAlCH,OAAQC,EAA0BE,EAA1BF,aAAcF,EAAYI,EAAZJ,QAE9B,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,CAAQC,KAAK,wBACb,kBAAC,EAAD,CAAQwB,OA7BG,SAAAT,GACbqB,EAAS,CACPf,KAAM,yBAERgB,QAAQC,IAAIvB,GAEZwB,MAAM,wCAAD,OAAyCxB,EAAzC,uCACFyB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACAA,EAAaC,YAAc,EAC7BR,EAAS,CACPf,KAAM,uBACNW,QAASW,EAAaX,UAIxBI,EAAS,CACPf,KAAM,uBACNY,MAAOU,EAAaE,cAY1B,yBAAK9C,UAAU,UACZ2B,IAAYE,EACZ,4CACIA,EACH,yBAAK7B,UAAU,gBAAgB6B,GAE/BD,EAAOmB,KAAI,SAAC5C,EAAO6C,GAAR,OACT,kBAAC,EAAD,CAAOC,IAAG,UAAKD,EAAL,YAAc7C,EAAM+C,cAAgB/C,MAAOA,UC/E7CgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLI,QAAQJ,MAAMA,EAAMiC,c","file":"static/js/main.d27605f8.chunk.js","sourcesContent":["import React from \"react\";\nimport './Header.css';\n\nconst Header = (props) => {\n  return (\n    <header className=\"App-header\">\n      <h2>{props.text}</h2>\n    </header>\n  );\n};\n\nexport default Header;","import React from \"react\";\n\nconst Album = ({album}) => {\n    const albumReleaseDate = album.releaseDate.substring(0, 10);\n  return (\n    <div className=\"Album\">\n        <h2>{album.collectionName}</h2>\n        <div>{album.artistName}</div>\n\n        <div>\n            <img \n                alt={album.collectionName}\n                width=\"100\"\n                src={album.artworkUrl100}/>\n\n        </div>\n        <div>Tracks: {album.trackCount}</div>\n        <div>Released: {albumReleaseDate}</div>\n\n    </div>\n\n\n  );\n};\n\nexport default Album;\n\n","import React, { useState } from \"react\";\nimport './Search.css';\n\n\nconst Search = (props) => {\n  //current state, function to update it   \n  const [searchValue, setSearchValue] = useState(\"\");\n  \n  const handleSearchInputChanges = (e) => {\n    setSearchValue(e.target.value);\n  }\n\n  const resetInputField = () => {\n    setSearchValue(\"\")\n  }\n\n  const callSearchFunction = (e) => {\n    e.preventDefault();\n    props.search(searchValue);\n    resetInputField();\n  }\n\n  return (\n      <form className=\"search\">\n        <input\n          value={searchValue}\n          onChange={handleSearchInputChanges}\n          type=\"text\"\n        />\n        <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\n      </form>\n    );\n}\n\nexport default Search;","import React,  { useEffect, useReducer } from 'react';\nimport './App.css';\nimport Header from \"./Header\";\nimport Album from \"./Album\";\nimport Search from \"./Search\";\n\nconst ITUNES_API_URL = \"https://itunes.apple.com/search?term=Kanye&entity=album&attribute=artistTerm\"; // you should replace this with yours\n\nconst initialState = {\n  loading: true,\n  albums: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_ALBUM_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_ALBUM_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        albums: action.results\n      };\n    case \"SEARCH_ALBUM_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // useEffect(() => {  \n  //   fetch(ITUNES_API_URL)\n  //       .then(response => response.json())\n  //       .then(jsonResponse => {\n  //         dispatch({\n  //             type: \"SEARCH_ALBUM_SUCCESS\",\n  //             results: jsonResponse.results\n  //         });\n  //   });\n  // }, []);\n\n  const search = searchValue => {\n    dispatch({\n      type: \"SEARCH_ALBUM_REQUEST\"\n    });\n    console.log(searchValue);\n\n    fetch(`https://itunes.apple.com/search?term=${searchValue}&entity=album&attribute=artistTerm`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.resultCount > 0) {\n          dispatch({\n            type: \"SEARCH_ALBUM_SUCCESS\",\n            results: jsonResponse.results\n          })\n        } else {\n          // console.log(jsonResponse);\n          dispatch({\n            type: \"SEARCH_ALBUM_SUCCESS\",\n            error: jsonResponse.Error\n          })\n        }\n      });\n    };\n    \n  const { albums, errorMessage, loading } = state;\n\n  return (\n    <div className=\"App\">\n      <Header text=\"iTUNES ALBUM SEARCH\" />\n      <Search search={search} />\n      <div className=\"albums\">\n        {loading && !errorMessage ? (\n         <span>loading...</span>\n         ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          albums.map((album, index) => (\n            <Album key={`${index}-${album.collectionId}`} album={album} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}